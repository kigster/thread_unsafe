# frozen_string_literal: true

# NOTE: this class was auto-generated by Claude AI within Cursor
RSpec.describe ThreadUnsafe::AICounter do
  before do
    described_class.reset
  end

  describe ".count" do
    it "starts at 0 after reset" do
      expect(described_class.count).to eq(0)
    end
  end

  describe ".increment" do
    it "increments the counter by 1" do
      described_class.increment
      expect(described_class.count).to eq(1)
    end

    context "when using unsafe increment with multiple threads" do
      it "exhibits race conditions" do
        threads = Array.new(100) do
          Thread.new { described_class.increment }
        end
        threads.each(&:join)

        # Due to race conditions, the final count will likely be less than 100
        expect(described_class.count).to be < 100
      end
    end

    context "when using safe increment with multiple threads" do
      it "correctly counts all increments" do
        threads = Array.new(100) do
          Thread.new { described_class.increment(safely: true) }
        end
        threads.each(&:join)

        expect(described_class.count).to eq(100)
      end
    end
  end

  describe ".reset" do
    it "sets the counter back to 0" do
      5.times { described_class.increment }
      described_class.reset
      expect(described_class.count).to eq(0)
    end

    it "is thread-safe" do
      threads = Array.new(100) do
        Thread.new do
          5.times { described_class.increment }
          described_class.reset
        end
      end
      threads.each(&:join)

      expect(described_class.count).to eq(0)
    end
  end
end
